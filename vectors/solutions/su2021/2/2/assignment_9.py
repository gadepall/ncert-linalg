# -*- coding: utf-8 -*-
"""Assignment-9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16PveVTChQ2hQS9EMT8b-JokY-EBVOOkJ
"""

import numpy as np
import matplotlib.pyplot as plt

#if using termux
import subprocess
import shlex
#end if

#Generate line points
def line_gen(A,B):
  len =10
  x_AB = np.zeros((2,len))
  lam_1 = np.linspace(0,1,len)
  for i in range(len):
    temp1 = A + lam_1[i]*(B-A)
    x_AB[:,i]= temp1.T
  return x_AB

#Triangle vertices
A = np.array([4,2]) 
B = np.array([6,5]) 
C = np.array([1,4]) 

#To find D
D = (B+C)/2
print(D)

# To find E
E = (A+C)/2
print(E)

# To find F
F = (A+B)/2
print(F)



# To find the point P which divides AD in the ratio 2 : 1
#Section ratio
k = 1/2
#Section point
P = (k*A+D)/(k+1)
print(P)

# To find the point Q which divides BE in the ratio 2 : 1
#Section ratio
k = 1/2
#Section point
Q = (k*B+E)/(k+1)
print(Q)

# To find the point R which divides CF in the ratio 2 : 1
#Section ratio
k = 1/2
#Section point
R = (k*C+F)/(k+1)
print(R)


#Generating all lines
x_AB = line_gen(A,B)
x_BC = line_gen(B,C)
x_CA = line_gen(C,A)
x_AD = line_gen(A,D)
x_BE = line_gen(B,E)
x_CF = line_gen(C,F)



#Plotting all lines
plt.plot(x_AB[0,:],x_AB[1,:],label='$AB$')
plt.plot(x_BC[0,:],x_BC[1,:],label='$BC$')
plt.plot(x_CA[0,:],x_CA[1,:],label='$CA$')
plt.plot(x_AD[0,:],x_AD[1,:],label='$AD$')
plt.plot(x_BE[0,:],x_BE[1,:],label='$BE$')
plt.plot(x_CF[0,:],x_CF[1,:],label='$CF$')

plt.plot(A[0], A[1], 'o')
plt.text(A[0] * (1 + 0.03), A[1] * (1) , 'A')
plt.plot(B[0], B[1], 'o')
plt.text(B[0] * (1 + 0.02), B[1] * (1) , 'B')
plt.plot(C[0], C[1], 'o')
plt.text(C[0] * (1 + 0.01), C[1] * (1 + 0.02) , 'C')
plt.plot(D[0], D[1], 'o')
plt.text(D[0] * (1), D[1] * (1 + 0.01) , 'D')
plt.plot(P[0], P[1], 'o')
plt.text(P[0] * (1), P[1] * (1 + 0.02) , 'P')
plt.plot(E[0], E[1], 'o')
plt.text(E[0] * (1), E[1] * (1 - 0.1) , 'E')
plt.plot(F[0], F[1], 'o')
plt.text(F[0] * (1), F[1] * (1 - 0.1) , 'F')
plt.plot(Q[0], Q[1], 'o')
plt.text(Q[0] * (1 + 0.03), Q[1] * (1 + 0.01) , 'Q')
plt.plot(R[0], R[1], 'o')
plt.text(R[0] * (1 + 0.02), R[1] * (1 - 0.05) , 'R')


plt.xlabel('$x$')
plt.ylabel('$y$')
plt.legend(loc='best')
plt.grid() # minor
plt.show()