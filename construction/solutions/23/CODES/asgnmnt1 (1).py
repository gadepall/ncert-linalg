# -*- coding: utf-8 -*-
"""ASGNMNT1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1owmZtvVEpf99v89cYubO7nPqel_wKkVy
"""

# -*- coding: utf-8 -*-
"""ASSIGNMENT1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vBNusvh2DYwvn5tTXWedduY4IItE9SEJ
"""

# -*- coding: utf-8 -*-
"""coeffs.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1BENeKzBauyOjSYqXOpynAcVoj0eB845R
"""

import numpy as np


def dir_vec(A,B):
  return B-A

def norm_vec(A,B):
  return np.matmul(omat, dir_vec(A,B))

#Generate line points
#def line_gen(A,B):
#  len =10
#  dim = A.shape[0]
#  x_AB = np.zeros((dim,len))
#  lam_1 = np.linspace(0,1,len)
#  for i in range(len):
#    temp1 = A + lam_1[i]*(B-A)
#    x_AB[:,i]= temp1.T
#  return x_AB

#Generate line intercepts
def line_icepts(n,c):
  e1 = np.array([1,0]) 
  e2 = np.array([0,1]) 
  A = c*e1/(n@e1)
  B = c*e2/(n@e2)
  return A,B

#Generate line points
def line_dir_pt(m,A,k1,k2):
  len =10
  dim = A.shape[0]
  x_AB = np.zeros((dim,len))
  lam_1 = np.linspace(k1,k2,len)
  for i in range(len):
    temp1 = A + lam_1[i]*m
    x_AB[:,i]= temp1.T
  return x_AB
#Generate line points

def line_norm_eq(n,c,k):
  len =10
  dim = n.shape[0]
  m = omat@n
  m = m/np.linalg.norm(m)
#  x_AB = np.zeros((dim,2*len))
  x_AB = np.zeros((dim,len))
  lam_1 = np.linspace(k[0],k[1],len)
#  print(lam_1)
#  lam_2 = np.linspace(0,k2,len)
  if c==0:
    for i in range(len):
      temp1 = lam_1[i]*m
      x_AB[:,i]= temp1.T
  else:
    A,B = line_icepts(n,c)
    for i in range(len):
      temp1 = A + lam_1[i]*m
      x_AB[:,i]= temp1.T
#    temp2 = B + lam_2[i]*m
#    x_AB[:,i+len]= temp2.T
  return x_AB

#def line_dir_pt(m,A, dim):
#  len = 10
#  dim = A.shape[0]
#  x_AB = np.zeros((dim,len))
#  lam_1 = np.linspace(0,10,len)
#  for i in range(len):
#    temp1 = A + lam_1[i]*m
#    x_AB[:,i]= temp1.T
#  return x_AB


#Generate line points
def line_gen(A,B):
  len =10
  x_AB = np.zeros((2,len))
  lam_1 = np.linspace(0,1,len)
  for i in range(len):
    temp1 = A + lam_1[i]*(B-A)
    x_AB[:,i]= temp1.T
  return x_AB

#Foot of the Altitude
def alt_foot(A,B,C):
  m = B-C
  n = np.matmul(omat,m) 
  N=np.vstack((m,n))
  p = np.zeros(2)
  p[0] = m@A 
  p[1] = n@B
  #Intersection
  P=np.linalg.inv(N.T)@p
  return P

#Intersection of two lines
def line_intersect(n1,c1,n2,c2):
  N=np.vstack((n1,n2))
  p = np.array([c1,c2]) 
  #Intersection
  P=np.linalg.inv(N)@p
#  P=np.linalg.inv(N.T)@p
  return P



# -*- coding: utf-8 -*-
"""ASSIGNMENT1.ipynb
Automatically generated by Colaboratory.
Original file is located at
https://colab.research.google.com/drive/1vBNusvh2DYwvn5tTXWedduY4IItE9SEJ#scrollTo=bkHCUx24AeJ7&line=5&uniqifier=1
"""

#Code by C.RAMYA TULASI
#May 8, 2021
#Drawing a Right Angled Triangle LMN

import numpy as np
import matplotlib.pyplot as plt



#Sides
LN = 5
MN = 3
LM = 4

#Calculating third side 
LN=((LM*LM)-(MN*MN))**(0.5)

#Triangle vertices
L = np.array([0,LM]) 
M = np.array([0,0]) 
N = np.array([LN,0]) 


#Generating all lines
x_LM = line_gen(L,M)
x_MN = line_gen(M,N)
x_NL = line_gen(N,L)

#Plotting all lines
plt.plot(x_LM[0,:],x_LM[1,:],label='$LM$')
plt.plot(x_MN[0,:],x_MN[1,:],label='$MN$')
plt.plot(x_NL[0,:],x_NL[1,:],label='$NL$')

plt.plot(L[0], L[1], 'o')
plt.text(L[0] * (1 + 0.1), L[1] * (1 - 0.1) , 'L')
plt.plot(M[0], M[1], 'o')
plt.text(M[0] * (1 - 0.2), M[1] * (1) , 'M')
plt.plot(N[0], N[1], 'o')
plt.text(N[0] * (1 + 0.03), N[1] * (1 - 0.1) , 'N')

plt.xlabel('$x$')
plt.ylabel('$y$')
plt.legend(loc='best')
plt.grid() # minor