# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j5X1oQI7X6crP8uv7gvtlAqs67Fma7WY
"""

# -*- coding: utf-8 -*-
"""coeffs.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1BENeKzBauyOjSYqXOpynAcVoj0eB845R
"""

import numpy as np


def dir_vec(A,B):
  return B-A

def norm_vec(A,B):
  return np.matmul(omat, dir_vec(A,B))

#Generate line points
#def line_gen(A,B):
#  len =10
#  dim = A.shape[0]
#  x_AB = np.zeros((dim,len))
#  lam_1 = np.linspace(0,1,len)
#  for i in range(len):
#    temp1 = A + lam_1[i]*(B-A)
#    x_AB[:,i]= temp1.T
#  return x_AB

#Generate line intercepts
def line_icepts(n,c):
  e1 = np.array([1,0]) 
  e2 = np.array([0,1]) 
  A = c*e1/(n@e1)
  B = c*e2/(n@e2)
  return A,B

#Generate line points
def line_dir_pt(m,A,k1,k2):
  len =10
  dim = A.shape[0]
  x_AB = np.zeros((dim,len))
  lam_1 = np.linspace(k1,k2,len)
  for i in range(len):
    temp1 = A + lam_1[i]*m
    x_AB[:,i]= temp1.T
  return x_AB
#Generate line points

def line_norm_eq(n,c,k):
  len =10
  dim = n.shape[0]
  m = omat@n
  m = m/np.linalg.norm(m)
#  x_AB = np.zeros((dim,2*len))
  x_AB = np.zeros((dim,len))
  lam_1 = np.linspace(k[0],k[1],len)
#  print(lam_1)
#  lam_2 = np.linspace(0,k2,len)
  if c==0:
    for i in range(len):
      temp1 = lam_1[i]*m
      x_AB[:,i]= temp1.T
  else:
    A,B = line_icepts(n,c)
    for i in range(len):
      temp1 = A + lam_1[i]*m
      x_AB[:,i]= temp1.T
#    temp2 = B + lam_2[i]*m
#    x_AB[:,i+len]= temp2.T
  return x_AB

#def line_dir_pt(m,A, dim):
#  len = 10
#  dim = A.shape[0]
#  x_AB = np.zeros((dim,len))
#  lam_1 = np.linspace(0,10,len)
#  for i in range(len):
#    temp1 = A + lam_1[i]*m
#    x_AB[:,i]= temp1.T
#  return x_AB


#Generate line points
def line_gen(A,B):
  len =10
  x_AB = np.zeros((2,len))
  lam_1 = np.linspace(0,1,len)
  for i in range(len):
    temp1 = A + lam_1[i]*(B-A)
    x_AB[:,i]= temp1.T
  return x_AB

#Foot of the Altitude
def alt_foot(A,B,C):
  m = B-C
  n = np.matmul(omat,m) 
  N=np.vstack((m,n))
  p = np.zeros(2)
  p[0] = m@A 
  p[1] = n@B
  #Intersection
  P=np.linalg.inv(N.T)@p
  return P

#Intersection of two lines
def line_intersect(n1,c1,n2,c2):
  N=np.vstack((n1,n2))
  p = np.array([c1,c2]) 
  #Intersection
  P=np.linalg.inv(N)@p
#  P=np.linalg.inv(N.T)@p
  return P

#Radius and centre of the circumcircle
#of triangle ABC
def ccircle(A,B,C):
  p = np.zeros(2)
  n1 = dir_vec(B,A)
  p[0] = 0.5*(np.linalg.norm(A)**2-np.linalg.norm(B)**2)
  n2 = dir_vec(C,B)
  p[1] = 0.5*(np.linalg.norm(B)**2-np.linalg.norm(C)**2)
  #Intersection
  N=np.vstack((n1,n2))
  O=np.linalg.inv(N)@p
  r = np.linalg.norm(A -O)
  return O,r

#Radius and centre of the incircle
#of triangle ABC
def icentre(A,B,C,k1,k2):
  p = np.zeros(2)
  t = norm_vec(B,C)
  n1 = t/np.linalg.norm(t)
  t = norm_vec(C,A)
  n2 = t/np.linalg.norm(t)
  t = norm_vec(A,B)
  n3 = t/np.linalg.norm(t)
  p[0] = n1@B- k1*n2@C
  p[1] = n2@C- k2*n3@A
  N=np.vstack((n1-k1*n2,n2-k2*n3))
  I=np.matmul(np.linalg.inv(N),p)
  r = n1@(I-B)
  #Intersection
  return I,r

def mult_line(A_I,b_z,k,m):
 for i in range(m):
  if i == 0:
    x = line_norm_eq(A_I[i,:],b_z[i],k[i,:])
  elif i == 1:
    y = line_norm_eq(A_I[i,:],b_z[i],k[i,:])
    z = np.vstack((x[None], y[None]))
  else:
    x = line_norm_eq(A_I[i,:],b_z[i],k[i,:])
    z = np.vstack((z,x[None]))
 return z

dvec = np.array([-1,1]) 
#Orthogonal matrix
omat = np.array([[0,1],[-1,0]])
# -*- coding: utf-8 -*-
"""Assignment3.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1YCSg8VKwMvN5Nx9PLe1ntVAgaRX94u0J
"""


import numpy as np
import matplotlib.pyplot as plt

#centre and radius of circles
C=np.array([0,0])
r1=3.4
#Inputs
P =np.array([1.7,2.9])
Q = np.array([-2.4,2.4])
M = np.array([-0.35,2.6]) 
n = np.array([1,0.1]) 
m = omat@n
k1=0
k2=10
#print(P,Q)
#point on circles
A1=np.array([C[0]+r1,C[1]])
P=np.array([1.7,2.9])
Q=([-2.4,2.4])
#Generating all lines
x_CA1 = line_gen(C,A1)

#Plotting all lines
plt.plot(x_CA1[0,:],x_CA1[1,:],label='$r=3.4$')


#Plotting the first circle of radius 3.4
c1 = 3.4
theta1 = np.linspace(0,2*np.pi,50)
x1 = c1*np.cos(theta1)
y1 = c1*np.sin(theta1)
P = np.array(([c1*np.cos(np.pi/3),c1*np.sin(np.pi/3)]))
Q = np.array(([c1*np.cos(3*np.pi/4),c1*np.sin(3*np.pi/4)]))
plt.plot(x1,y1,label='$circle with (r=3.4)$')
#k1 = -8
#k2 = 8
##Generating all lines
x_PQ = line_gen(P,Q)
x_perp_bisect = line_dir_pt(m,M,k1,k2)
plt.plot(x_PQ[0,:],x_PQ[1,:],label='PQ')
plt.plot(x_perp_bisect[0,:],x_perp_bisect[1,:],label='$Perpendicular Bisector$')

plt.plot(P[0], P[1], 'C')
plt.text(P[0]+0.1,P[1]+0.1,'P',weight = "bold")
plt.plot(Q[0], Q[1], 'C')
plt.text(Q[0] + 0.1,Q[1]+0.1,'Q', weight = "bold")
plt.plot(M[0], M[1], 'o')
plt.text(M[0] * (1 + 0.3), M[1] * (1) , 'M')
plt.xlabel('$x$')
plt.ylabel('$y$')
plt.text(0,0,'C')
plt.legend(loc='best')
plt.grid() # minor
plt.axis('equal')
plt.show()