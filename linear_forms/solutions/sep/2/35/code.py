# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nDkbu7lHebFgACtoC00wcssBKK_PZfDU
"""

from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

def line_gen(A,B):
  len =20
  dim = A.shape[0]
  x_AB = np.zeros((dim,len))
  lam_1 = np.linspace(-2,2,len)
  for i in range(len):
    temp1 = A + lam_1[i]*(B)
    x_AB[:,i]= temp1.T
  return x_AB

def norm(a1,a2):
  x= np.sqrt(np.sum(np.square(a2-a1)))
  return x

#Points for line 1
A1 = np.array([6,2,2]).reshape((3,1))
B1 = np.array([1,-2,2]).reshape((3,1))

#Generating line 1
x_AB1 = line_gen(A1,B1)


#Points for line 2
A2 = np.array([-4,0,-1]).reshape((3,1))
B2 = np.array([3,-2,-2]).reshape((3,1))

#Generating line 2
x_AB2 = line_gen(A2,B2)

##Finding shortest distance between skew lines
B_array=np.concatenate((B2,B1),axis=1)
A=B_array.T@B_array

B=B_array.T@(A1-A2)

#Solving for lamba values using the equation Ax=B
lambda_v = np.linalg.solve(A,B)

# lamba_1 and -lambda_2 are the entries of above matrix
print('(lambda1,-lambda2)(calculated)=',lambda_v)

#Verifying with built in least square function
Y= np.linalg.lstsq(A,B)

print('(lambda1,-lambda2)(inbuilt)=',Y[0])

#positional vectors of end points of shortest distance line 
p1=point_gen(A1,B1,lambda_v[0,0])
p2=point_gen(A2,B2,-lambda_v[1,0])

#Finding shortest distance
d=norm(p1,p2)

print('The shortest distance between skew lines is: ',d)

##Plotting 3D-graphs
fig = plt.figure(figsize=(4,4))
ax = fig.add_subplot(111, projection='3d')

#plotting p1 
ax.scatter(p1[0,0],p1[1,0],p1[2,0],'c',label='p1') 
ax.text(p1[0,0]*(1+0.1),p1[1,0]*(1+0.1),p1[2,0]*(1+0.1),"p1")

#Plotting p2 
ax.scatter(p2[0,0],p2[1,0],p2[2,0],'c',label='p2')
ax.text(p2[0,0]*(1+0.1),p2[1,0]*(1+0.1),p2[2,0]*(1+0.1),"p2")

p=np.concatenate((p1,p2),axis=1)

#plotting A1
ax.scatter(6,2,2,'o',label='a1')
ax.text(6 * (1 + 0.1), 2 * (1 - 0.1) ,2*(1-0.1), "(1,2,3)")

#plotting line passing through A1 
plt.plot(x_AB1[0,:],x_AB1[1,:],x_AB1[2,:],color='g',label='Line 1')


#plotting A2
ax.scatter(-4,0,-1,'o',label='a2')
ax.text(-4 * (1 + 0.1), 0* (1 - 0.1) ,-1*(1-0.1), "(4,5,6)")

#plotting line passing through A2
plt.plot(x_AB2[0,:],x_AB2[1,:],x_AB2[2,:],color='r',label='Line 2')

#Plotting the line along shortest distance
plt.plot(p[0,:],p[1,:],p[2,:],color='b',label='shortest line')

plt.xlabel('$x$');plt.ylabel('$y$')
plt.grid()
plt.legend(loc='best')

plt.show()